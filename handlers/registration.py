import re
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

from states.states import ClientRegistration
from keyboards.main_keyboard import (
    get_registration_keyboard, 
    get_registration_confirm_keyboard,
    get_registration_edit_keyboard,
    get_client_data_keyboard,
    get_main_keyboard,
    get_cancel_keyboard
)
from config import ADMIN_IDS
from database.db import Database

router = Router()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_pattern = r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    return bool(re.match(phone_pattern, phone))

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(email_pattern, email))

def validate_passport_series(series: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    return len(series) == 4 and series.isdigit()

def validate_passport_number(number: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    return len(number) == 6 and number.isdigit()

def validate_date(date_str: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã"""
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def format_client_data(client_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = "üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    
    fields = [
        ("üë§ –§–ò–û", client_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üì± –¢–µ–ª–µ—Ñ–æ–Ω", client_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üìß Email", client_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", client_data.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üÜî –°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞", client_data.get('passport_series', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üî¢ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞", client_data.get('passport_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üèõÔ∏è –ö–µ–º –≤—ã–¥–∞–Ω", client_data.get('passport_issued_by', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", client_data.get('passport_issue_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üè† –ê–¥—Ä–µ—Å", client_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üìû –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏", client_data.get('emergency_contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
        ("üë• –û—Ç–Ω–æ—à–µ–Ω–∏–µ", client_data.get('relationship', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
    ]
    
    for label, value in fields:
        text += f"{label}: {value}\n"
    
    text += f"\n‚úÖ –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if client_data.get('is_verified') else '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}"
    
    return text

@router.message(F.text == "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration_menu(message: Message, db: Database):
    """–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    is_registered = await db.is_client_registered(message.from_user.id)
    
    if is_registered:
        client_data = await db.get_client_data(message.from_user.id)
        text = format_client_data(client_data)
        await message.answer(text, reply_markup=get_client_data_keyboard(), parse_mode="HTML")
    else:
        text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤!\n\n"
        text += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å–ª—É–≥–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n\n"
        text += "üìã <b>–ß—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:</b>\n"
        text += "‚Ä¢ –§–ò–û\n"
        text += "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        text += "‚Ä¢ Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        text += "‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        text += "‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        text += "‚Ä¢ –ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n"
        text += "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏\n"
        text += "‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —É—Å–æ–ø—à–µ–º—É\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await message.answer(text, reply_markup=get_registration_keyboard(), parse_mode="HTML")

@router.callback_query(F.data == "registration:start")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.answer()
    
    text = "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
    text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):\n\n"
    text += "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_full_name)

@router.callback_query(F.data == "registration:my_data")
async def show_my_data(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    await callback.answer()
    
    client_data = await db.get_client_data(callback.from_user.id)
    if client_data:
        text = format_client_data(client_data)
        await callback.message.edit_text(text, reply_markup=get_client_data_keyboard(), parse_mode="HTML")
    else:
        await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", 
                                       reply_markup=get_registration_keyboard())

@router.callback_query(F.data == "registration:edit")
async def edit_registration(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer()
    
    text = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    await callback.message.edit_text(text, reply_markup=get_registration_edit_keyboard(), parse_mode="HTML")

@router.callback_query(F.data.startswith("registration:edit:"))
async def edit_field(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    field = callback.data.split(":")[2]
    field_names = {
        "full_name": "–ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)",
        "phone": "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "email": "email",
        "birth_date": "–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)",
        "passport_series": "—Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã)",
        "passport_number": "–Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (6 —Ü–∏—Ñ—Ä)",
        "passport_issued_by": "–∫–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç",
        "passport_issue_date": "–¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)",
        "address": "–∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
        "emergency_contact": "–∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏",
        "relationship": "–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —É—Å–æ–ø—à–µ–º—É"
    }
    
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
    text += f"–í–≤–µ–¥–∏—Ç–µ {field_names.get(field, field)}:\n\n"
    
    if field == "phone":
        text += "–ü—Ä–∏–º–µ—Ä: +7 (999) 123-45-67"
    elif field == "email":
        text += "–ü—Ä–∏–º–µ—Ä: example@mail.ru"
    elif field == "birth_date" or field == "passport_issue_date":
        text += "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì"
    elif field == "passport_series":
        text += "4 —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1234"
    elif field == "passport_number":
        text += "6 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456"
    
    await callback.message.edit_text(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    state_map = {
        "full_name": ClientRegistration.waiting_for_full_name,
        "phone": ClientRegistration.waiting_for_phone,
        "email": ClientRegistration.waiting_for_email,
        "birth_date": ClientRegistration.waiting_for_birth_date,
        "passport_series": ClientRegistration.waiting_for_passport_series,
        "passport_number": ClientRegistration.waiting_for_passport_number,
        "passport_issued_by": ClientRegistration.waiting_for_passport_issued_by,
        "passport_issue_date": ClientRegistration.waiting_for_passport_issue_date,
        "address": ClientRegistration.waiting_for_address,
        "emergency_contact": ClientRegistration.waiting_for_emergency_contact,
        "relationship": ClientRegistration.waiting_for_relationship
    }
    
    await state.set_state(state_map.get(field))
    await state.update_data(editing_field=field)

@router.callback_query(F.data == "registration:confirm")
async def confirm_registration(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.answer()
    
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    success = await db.save_client_data(
        telegram_id=callback.from_user.id,
        full_name=data.get('full_name'),
        phone=data.get('phone'),
        email=data.get('email'),
        birth_date=data.get('birth_date'),
        passport_series=data.get('passport_series'),
        passport_number=data.get('passport_number'),
        passport_issued_by=data.get('passport_issued_by'),
        passport_issue_date=data.get('passport_issue_date'),
        address=data.get('address'),
        emergency_contact=data.get('emergency_contact'),
        relationship=data.get('relationship')
    )
    
    if success:
        text = "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        text += "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
        text += "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —É—Å–ª—É–≥–∞–º–∏.\n\n"
        text += "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard(is_admin=callback.from_user.id in ADMIN_IDS)
        )
    else:
        text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        await callback.message.edit_text(text, parse_mode="HTML")
    
    await state.clear()

@router.callback_query(F.data == "registration:cancel")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.answer()
    
    await state.clear()
    await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(is_admin=callback.from_user.id in ADMIN_IDS)
    )

@router.callback_query(F.data == "registration:back")
async def back_to_registration(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.answer()
    
    text = "üëã <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(text, reply_markup=get_registration_keyboard(), parse_mode="HTML")

@router.callback_query(F.data == "registration:verify")
async def verify_client(callback: CallbackQuery, db: Database):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    await callback.answer()
    
    success = await db.verify_client(callback.from_user.id)
    
    if success:
        text = "‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        text += "–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω."
    else:
        text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
        text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    await callback.message.edit_text(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@router.message(ClientRegistration.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    full_name = message.text.strip()
    
    if len(full_name) < 5:
        await message.answer("‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(full_name=full_name)
    
    text = "üì± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n\n"
    text += "–ü—Ä–∏–º–µ—Ä: +7 (999) 123-45-67"
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_phone)

@router.message(ClientRegistration.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    if not validate_phone(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(phone=phone)
    
    text = "üìß <b>–í–≤–µ–¥–∏—Ç–µ email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</b>\n\n"
    text += "–ü—Ä–∏–º–µ—Ä: example@mail.ru\n"
    text += "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
    
    keyboard = get_cancel_keyboard()
    keyboard.keyboard.append([{"text": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_email)

@router.message(ClientRegistration.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        email = None
    else:
        email = message.text.strip()
        if email and not validate_email(email):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    
    await state.update_data(email=email)
    
    text = "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:</b>\n\n"
    text += "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
    text += "–ü—Ä–∏–º–µ—Ä: 15.03.1990"
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_birth_date)

@router.message(ClientRegistration.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_date = message.text.strip()
    
    if not validate_date(birth_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    await state.update_data(birth_date=birth_date)
    
    text = "üÜî <b>–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞:</b>\n\n"
    text += "4 —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1234"
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_passport_series)

@router.message(ClientRegistration.waiting_for_passport_series)
async def process_passport_series(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    series = message.text.strip()
    
    if not validate_passport_series(series):
        await message.answer("‚ùå –°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(passport_series=series)
    
    text = "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:</b>\n\n"
    text += "6 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456"
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_passport_number)

@router.message(ClientRegistration.waiting_for_passport_number)
async def process_passport_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    number = message.text.strip()
    
    if not validate_passport_number(number):
        await message.answer("‚ùå –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(passport_number=number)
    
    text = "üèõÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç:</b>\n\n"
    text += "–ü—Ä–∏–º–µ—Ä: –£–§–ú–° –†–æ—Å—Å–∏–∏ –ø–æ –≥. –ú–æ—Å–∫–≤–µ"
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_passport_issued_by)

@router.message(ClientRegistration.waiting_for_passport_issued_by)
async def process_passport_issued_by(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç"""
    issued_by = message.text.strip()
    
    if len(issued_by) < 5:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(passport_issued_by=issued_by)
    
    text = "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞:</b>\n\n"
    text += "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
    text += "–ü—Ä–∏–º–µ—Ä: 20.05.2015"
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_passport_issue_date)

@router.message(ClientRegistration.waiting_for_passport_issue_date)
async def process_passport_issue_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    issue_date = message.text.strip()
    
    if not validate_date(issue_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    await state.update_data(passport_issue_date=issue_date)
    
    text = "üè† <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b>\n\n"
    text += "–ü—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1, –∫–≤. 1"
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_address)

@router.message(ClientRegistration.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    address = message.text.strip()
    
    if len(address) < 10:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(address=address)
    
    text = "üìû <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏:</b>\n\n"
    text += "–§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Å–ª—É—á–∞–µ\n"
    text += "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞, +7 (999) 123-45-67"
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_emergency_contact)

@router.message(ClientRegistration.waiting_for_emergency_contact)
async def process_emergency_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏"""
    emergency_contact = message.text.strip()
    
    if len(emergency_contact) < 10:
        await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(emergency_contact=emergency_contact)
    
    text = "üë• <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —É—Å–æ–ø—à–µ–º—É:</b>\n\n"
    text += "–ü—Ä–∏–º–µ—Ä: —Å—ã–Ω, –¥–æ—á—å, —Å—É–ø—Ä—É–≥, –±—Ä–∞—Ç, —Å–µ—Å—Ç—Ä–∞, –¥—Ä—É–≥ –∏ —Ç.–¥."
    
    await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_relationship)

@router.message(ClientRegistration.waiting_for_relationship)
async def process_relationship(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —É—Å–æ–ø—à–µ–º—É"""
    relationship = message.text.strip()
    
    if len(relationship) < 2:
        await message.answer("‚ùå –û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(relationship=relationship)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    
    text = "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    text += f"üë§ <b>–§–ò–û:</b> {data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìß <b>Email:</b> {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {data.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üÜî <b>–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> {data.get('passport_series', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üî¢ <b>–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> {data.get('passport_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üèõÔ∏è <b>–ö–µ–º –≤—ã–¥–∞–Ω:</b> {data.get('passport_issued_by', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:</b> {data.get('passport_issue_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:</b> {data.get('emergency_contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üë• <b>–û—Ç–Ω–æ—à–µ–Ω–∏–µ:</b> {data.get('relationship', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    text += "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?"
    
    await message.answer(text, reply_markup=get_registration_confirm_keyboard(), parse_mode="HTML")
    await state.set_state(ClientRegistration.waiting_for_confirm)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_input(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    current_state = await state.get_state()
    if current_state and not current_state.startswith(
        ("ClientRegistration", "FuneralForm", "MemoryRecord", "AIHelper")
    ):
        return
    await state.clear()
    await message.answer(
        "‚ùå –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_main_keyboard(is_admin=message.from_user.id in ADMIN_IDS)
    )