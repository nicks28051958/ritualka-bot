from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import logging

from keyboards.main_keyboard import (
    get_main_keyboard,
    get_cancel_keyboard,
    get_ai_lawyer_actions_keyboard  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç!
)
from config import ADMIN_IDS
from services.openai_service import OpenAIService
from database.db import Database
from states.states import AIHelper

router = Router()

@router.message(Command("ask_lawyer"))
@router.message(Command("documents"))
@router.message(F.text == "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
async def start_ai_lawyer(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    await state.set_state(AIHelper.waiting_for_question)
    help_text = """
ü§ñ **AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Ö–æ—Ä–æ–Ω.

üìã **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Å–º–µ—Ä—Ç–∏?
‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∫—Ä–µ–º–∞—Ü–∏–∏?
‚Ä¢ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Å–º–µ—Ä—Ç–∏?
‚Ä¢ –ö–∞–∫–∏–µ –ª—å–≥–æ—Ç—ã –ø–æ–ª–æ–∂–µ–Ω—ã –ø—Ä–∏ –ø–æ—Ö–æ—Ä–æ–Ω–∞—Ö?

üí¨ **–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**
(–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)
    """.strip()
    await message.answer(help_text, reply_markup=get_cancel_keyboard())

@router.message(AIHelper.waiting_for_question, F.text)
async def process_ai_question(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(is_admin=message.from_user.id in ADMIN_IDS)
        )
        return

    question = message.text.strip()
    logging.info(f"AI-–ø–æ–º–æ—â–Ω–∏–∫: –ø–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {question}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
    if len(question) > 500:
        await message.answer(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
    if not question or question.isspace():
        await message.answer(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        )
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await db.log_request(
        telegram_id=message.from_user.id,
        request_type="ai_lawyer",
        request_data=question
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = await message.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        openai_service = OpenAIService()
        response = await openai_service.get_legal_advice(question)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        await db.log_request(
            telegram_id=message.from_user.id,
            request_type="ai_lawyer_response",
            request_data=question,
            response_data=response
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await processing_msg.edit_text(
            f"ü§ñ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n{response}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=get_ai_lawyer_actions_keyboard()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞: {e}", exc_info=True)
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    # –ù–µ –æ—á–∏—â–∞–µ–º state! ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ =====

@router.callback_query(F.data == "ai_lawyer:ask_again")
async def ai_lawyer_ask_again(call: CallbackQuery, state: FSMContext):
    await state.set_state(AIHelper.waiting_for_question)
    help_text = (
        "ü§ñ **AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º**\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await call.message.answer(help_text, reply_markup=get_cancel_keyboard())
    await call.answer()

@router.callback_query(F.data == "ai_lawyer:to_main")
async def ai_lawyer_to_main(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(is_admin=call.from_user.id in ADMIN_IDS)
    )
    await call.answer()
