from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.main_keyboard import (
    get_shop_categories_keyboard, get_product_keyboard, get_main_keyboard
)
from database.db import Database

router = Router()

@router.message(Command("shop"))
@router.message(F.text == "üõçÔ∏è –¢–æ–≤–∞—Ä—ã")
async def start_shop(message: Message, db: Database):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –º–∞–≥–∞–∑–∏–Ω–æ–º"""
    categories = await db.get_categories()
    shop_text = "\n".join([
        "üõçÔ∏è <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>",
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
    ])

    await message.answer(shop_text, reply_markup=get_shop_categories_keyboard(categories))

@router.callback_query(F.data.startswith("shop:category:"))
async def show_category_products(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split(":")[2]
    
    if category == "all":
        products = await db.get_products_by_category()
    else:
        products = await db.get_products_by_category(category)
    
    if not products:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await show_product(callback, products, 0)

@router.callback_query(F.data.startswith("shop:back"))
async def back_to_categories(callback: CallbackQuery, db: Database):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    await start_shop(callback.message, db)

@router.callback_query(F.data.startswith("product:select:"))
async def select_product(callback: CallbackQuery, db: Database):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    products = await db.get_products_by_category()
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {product['price']} ‚ÇΩ",
        show_alert=True
    )

async def show_product(callback: CallbackQuery, products: list, index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    if index >= len(products):
        index = 0
    elif index < 0:
        index = len(products) - 1
    
    product = products[index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    caption = f"""
üõçÔ∏è **{product['name']}**

{product['description']}

üí∞ **–¶–µ–Ω–∞:** {product['price']:,} ‚ÇΩ
    """.strip()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if len(products) > 1:
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"shop:nav:{index-1}"))
        builder.add(InlineKeyboardButton(text=f"{index+1}/{len(products)}", callback_data="shop:info"))
        builder.add(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"shop:nav:{index+1}"))
        builder.adjust(3)
    
    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    builder.add(InlineKeyboardButton(
        text=f"üõí –í—ã–±—Ä–∞—Ç—å ({product['price']} ‚ÇΩ)", 
        callback_data=f"product:select:{product['id']}"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop:back"))
    builder.adjust(1)
    
    keyboard = builder.as_markup()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if product.get('photo_path') and product['photo_path'] != "photos/placeholder.jpg":
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media="https://via.placeholder.com/400x300?text=–¢–æ–≤–∞—Ä",
                    caption=caption
                ),
                reply_markup=keyboard
            )
        except:
            await callback.message.edit_text(caption, reply_markup=keyboard)
    else:
        await callback.message.edit_text(caption, reply_markup=keyboard)

@router.callback_query(F.data.startswith("shop:nav:"))
async def navigate_products(callback: CallbackQuery, db: Database):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
    index = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    products = await db.get_products_by_category()
    
    if not products:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    await show_product(callback, products, index)

@router.callback_query(F.data == "shop:info")
async def shop_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    await callback.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º", show_alert=True) 