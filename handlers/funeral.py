from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.main_keyboard import (
    get_funeral_services_keyboard,
    get_funeral_budget_keyboard,
    get_cross_type_keyboard,
)

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —É—Å–ª—É–≥
SERVICE_LABELS = {
    "transport": "–ü–µ—Ä–µ–≤–æ–∑–∫–∞ —Ç–µ–ª–∞",
    "coffin": "–ì—Ä–æ–±",
    "wreaths": "–í–µ–Ω–∫–∏",
    "cross": "–ö—Ä–µ—Å—Ç",
    "hall": "–ü—Ä–æ—â–∞–ª—å–Ω—ã–π –∑–∞–ª",
    "ceremoniymaster": "–¶–µ—Ä–µ–º–æ–Ω–∏–π–º–µ–π—Å—Ç–µ—Ä",
    "simple_funeral": "–û–±—ã—á–Ω—ã–µ –ø–æ—Ö–æ—Ä–æ–Ω—ã",
    "cremation": "–ö—Ä–µ–º–∞—Ü–∏—è"
}

class FuneralForm(StatesGroup):
    waiting_for_address = State()
    waiting_for_wreaths = State()

# –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ö–æ—Ä–æ–Ω"
@router.message(F.text == "üèõÔ∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ö–æ—Ä–æ–Ω")
async def funeral_handler(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(selected_services=[])
    await message.answer(
        "üñ§ *–ü—Ä–∏–º–∏—Ç–µ –Ω–∞—à–∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞–Ω–∏—è...*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª—É–≥–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        parse_mode="Markdown",
        reply_markup=get_funeral_services_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
@router.callback_query(F.data.startswith("funeral_service:"))
async def funeral_service_callback(call: CallbackQuery, state: FSMContext):
    action = call.data.split(":")[1]
    data = await state.get_data()
    selected = data.get("selected_services", [])

    if action == "done":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –≤—ã–±–æ—Ä –±—é–¥–∂–µ—Ç–∞
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø–æ—Ö–æ—Ä–æ–Ω:", reply_markup=get_funeral_budget_keyboard())
        await call.answer()
        return

    if action not in selected:
        selected.append(action)
        await state.update_data(selected_services=selected)

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:
    if action == "transport":
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–ª–æ:")
        await state.set_state(FuneralForm.waiting_for_address)
    elif action == "wreaths":
        await call.message.answer("–°–∫–æ–ª—å–∫–æ –≤–µ–Ω–∫–æ–≤ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è?")
        await state.set_state(FuneralForm.waiting_for_wreaths)
    elif action == "cross":
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫—Ä–µ—Å—Ç–∞:", reply_markup=get_cross_type_keyboard())
    else:
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é (–æ—Ç–º–µ—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω–æ–µ)
        await call.message.edit_reply_markup(reply_markup=get_funeral_services_keyboard(selected))
    await call.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏
@router.message(FuneralForm.waiting_for_address)
async def handle_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    selected = data.get("selected_services", [])
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
    await message.answer(
        "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏:",
        reply_markup=get_funeral_services_keyboard(selected)
    )
    await state.set_data({"selected_services": selected, **data})

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ–Ω–∫–æ–≤
@router.message(FuneralForm.waiting_for_wreaths)
async def handle_wreaths(message: Message, state: FSMContext):
    await state.update_data(wreaths=message.text)
    data = await state.get_data()
    selected = data.get("selected_services", [])
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–Ω–∫–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ.")
    await message.answer(
        "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏:",
        reply_markup=get_funeral_services_keyboard(selected)
    )
    await state.set_data({"selected_services": selected, **data})

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫—Ä–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("cross:"))
async def cross_type_callback(call: CallbackQuery, state: FSMContext):
    cross_type = call.data.split(":")[1]
    cross_label = {
        "orthodox": "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π",
        "catholic": "–ö–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–π",
        "metal": "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π",
        "wood": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π"
    }.get(cross_type, cross_type)
    await state.update_data(cross_type=cross_label)
    data = await state.get_data()
    selected = data.get("selected_services", [])
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω –∫—Ä–µ—Å—Ç: {cross_label}.")
    await call.message.answer(
        "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏:",
        reply_markup=get_funeral_services_keyboard(selected)
    )
    await state.set_data({"selected_services": selected, **data})
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞
@router.callback_query(F.data.startswith("budget:"))
async def budget_chosen(call: CallbackQuery, state: FSMContext):
    budget = call.data.split(":")[1]
    await state.update_data(budget=budget)
    data = await state.get_data()
    summary = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç: –¥–æ {budget} —Ä—É–±.\n"
    if 'address' in data:
        summary += f"–ê–¥—Ä–µ—Å –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {data['address']}\n"
    if 'wreaths' in data:
        summary += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–Ω–∫–æ–≤: {data['wreaths']}\n"
    if 'cross_type' in data:
        summary += f"–¢–∏–ø –∫—Ä–µ—Å—Ç–∞: {data['cross_type']}\n"
    # --- –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ ---
    selected_keys = data.get("selected_services", [])
    services_rus = [SERVICE_LABELS.get(key, key) for key in selected_keys]
    summary += "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏: " + ", ".join(services_rus)
    await call.message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n" + summary)
    await state.clear()
    await call.answer()
