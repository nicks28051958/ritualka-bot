import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from states.states import MemoryRecord
from keyboards.main_keyboard import (
    get_memory_keyboard, get_memory_record_keyboard, get_cancel_keyboard, get_main_keyboard
)
from config import ADMIN_IDS
from database.db import Database
from services.memory_service import MemoryService

router = Router()

@router.message(Command("memory"))
@router.message(F.text == "üïØÔ∏è –£–≥–æ–ª–æ–∫ –ø–∞–º—è—Ç–∏")
async def start_memory(message: Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —É–≥–æ–ª–∫–æ–º –ø–∞–º—è—Ç–∏"""
    memory_text = """
üïØÔ∏è **–£–≥–æ–ª–æ–∫ –ø–∞–º—è—Ç–∏**

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞–º—è—Ç–∏ –æ –¥–æ—Ä–æ–≥–æ–º —á–µ–ª–æ–≤–µ–∫–µ.

üìù **–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏
‚Ä¢ –ó–∞–∂–µ—á—å —Å–≤–µ—á—É –≤ –ø–∞–º—è—Ç—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """.strip()
    
    await message.answer(memory_text, reply_markup=get_memory_keyboard())

@router.callback_query(F.data == "memory:create")
async def start_create_memory(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏"""
    await state.set_state(MemoryRecord.waiting_for_photo)
    
    await callback.message.edit_text(
        "üì∏ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏**\n\n"
        "–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É—Å–æ–ø—à–µ–≥–æ\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç)",
        reply_markup=get_cancel_keyboard()
    )

@router.message(MemoryRecord.waiting_for_photo)
async def process_memory_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏"""
    if message.text and message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(is_admin=message.from_user.id in ADMIN_IDS)
        )
        return
    
    photo_path = None
    
    if message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await message.bot.get_file(file_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("memory_photos", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        photo_path = f"memory_photos/{file_id}.jpg"
        await message.bot.download_file(file.file_path, photo_path)
        
        await state.update_data(photo_path=photo_path)
        await message.answer("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    
    elif message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return
    
    await state.set_state(MemoryRecord.waiting_for_name)
    await message.answer(
        "üìù **–®–∞–≥ 2:** –í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—Å–æ–ø—à–µ–≥–æ:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(MemoryRecord.waiting_for_name)
async def process_memory_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(is_admin=message.from_user.id in ADMIN_IDS)
        )
        return
    
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    await state.update_data(name=message.text.strip())
    await state.set_state(MemoryRecord.waiting_for_birth_date)
    
    await message.answer(
        "üìÖ **–®–∞–≥ 3:** –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1950)",
        reply_markup=get_cancel_keyboard()
    )

@router.message(MemoryRecord.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(is_admin=message.from_user.id in ADMIN_IDS)
        )
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if not message.text or len(message.text) != 10 or message.text[2] != '.' or message.text[5] != '.':
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    await state.update_data(birth_date=message.text)
    await state.set_state(MemoryRecord.waiting_for_death_date)
    
    await message.answer(
        "üìÖ **–®–∞–≥ 4:** –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ—Ä—Ç–∏\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.12.2023)",
        reply_markup=get_cancel_keyboard()
    )

@router.message(MemoryRecord.waiting_for_death_date)
async def process_death_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–º–µ—Ä—Ç–∏"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(is_admin=message.from_user.id in ADMIN_IDS)
        )
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if not message.text or len(message.text) != 10 or message.text[2] != '.' or message.text[5] != '.':
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    await state.update_data(death_date=message.text)
    await state.set_state(MemoryRecord.waiting_for_memory_text)
    
    await message.answer(
        "üí≠ **–®–∞–≥ 5:** –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –µ–≥–æ –∂–∏–∑–Ω–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, –æ —Ç–æ–º, –∫–∞–∫–∏–º –æ–Ω –±—ã–ª...",
        reply_markup=get_cancel_keyboard()
    )

@router.message(MemoryRecord.waiting_for_memory_text)
async def process_memory_text(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(is_admin=message.from_user.id in ADMIN_IDS)
        )
        return
    
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
    record_id = await db.create_memory_record(
        telegram_id=message.from_user.id,
        name=data["name"],
        birth_date=data["birth_date"],
        death_date=data["death_date"],
        memory_text=message.text.strip(),
        photo_path=data.get("photo_path"),
        html_path=""  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
    )
    
    # –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
    memory_service = MemoryService()
    html_path = await memory_service.create_memory_page(
        record_id=record_id,
        name=data["name"],
        birth_date=data["birth_date"],
        death_date=data["death_date"],
        memory_text=message.text.strip(),
        photo_path=data.get("photo_path"),
        candles_count=0
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ HTML –≤ –±–∞–∑–µ
    # (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç UPDATE –∑–∞–ø—Ä–æ—Å)
    
    await state.clear()
    
    success_text = f"""
‚úÖ **–ó–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω–∞!**

üìù **{data['name']}**
üìÖ {data['birth_date']} ‚Äî {data['death_date']}

üïØÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–º—è—Ç–∏ –≥–æ—Ç–æ–≤–∞.
–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∑–∞–∂–µ—á—å —Å–≤–µ—á—É –≤ –ø–∞–º—è—Ç—å.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    """.strip()
    
    await message.answer(
        success_text,
        reply_markup=get_memory_record_keyboard(record_id)
    )

@router.callback_query(F.data == "memory:my_records")
async def show_my_records(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    records = await db.get_memory_records(callback.from_user.id)
    
    if not records:
        await callback.message.edit_text(
            "üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–∞–º—è—Ç–∏.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å!",
            reply_markup=get_memory_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    await show_memory_record(callback, records, 0)

@router.callback_query(F.data == "memory:all_records")
async def show_all_records(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏"""
    records = await db.get_memory_records()
    
    if not records:
        await callback.message.edit_text(
            "üïØÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–∞–º—è—Ç–∏.\n"
            "–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å—å!",
            reply_markup=get_memory_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    await show_memory_record(callback, records, 0)

@router.callback_query(F.data.startswith("memory:candle:"))
async def add_candle(callback: CallbackQuery, db: Database):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–≤–µ—á—É –∫ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏"""
    record_id = int(callback.data.split(":")[2])
    
    success = await db.add_candle(record_id, callback.from_user.id)
    
    if success:
        await callback.answer("üïØÔ∏è –°–≤–µ—á–∞ –∑–∞–∂–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        records = await db.get_memory_records()
        record = next((r for r in records if r['id'] == record_id), None)
        
        if record:
            await show_memory_record(callback, [record], 0, can_add_candle=False)
    else:
        await callback.answer("üïØÔ∏è –í—ã —É–∂–µ –∑–∞–∂–∏–≥–∞–ª–∏ —Å–≤–µ—á—É –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏", show_alert=True)

@router.callback_query(F.data == "memory:back")
async def back_to_memory_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–∞–º—è—Ç–∏"""
    await start_memory(callback.message)

async def show_memory_record(callback: CallbackQuery, records: list, index: int, can_add_candle: bool = True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏"""
    if index >= len(records):
        index = 0
    elif index < 0:
        index = len(records) - 1
    
    record = records[index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏
    record_text = f"""
üïØÔ∏è **–ü–∞–º—è—Ç–∏ {record['name']}**

üìÖ **–ì–æ–¥—ã –∂–∏–∑–Ω–∏:** {record['birth_date']} ‚Äî {record['death_date']}

üí≠ **–ü–∞–º—è—Ç—å:**
{record['memory_text']}

üïØÔ∏è **–ó–∞–∂–∂–µ–Ω–æ —Å–≤–µ—á–µ–π:** {record['candles_count']}
    """.strip()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if len(records) > 1:
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"memory:nav:{index-1}"))
        builder.add(InlineKeyboardButton(text=f"{index+1}/{len(records)}", callback_data="memory:info"))
        builder.add(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"memory:nav:{index+1}"))
        builder.adjust(3)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–≤–µ—á–∏
    if can_add_candle:
        builder.add(InlineKeyboardButton(
            text="üïØÔ∏è –ó–∞–∂–µ—á—å —Å–≤–µ—á—É", 
            callback_data=f"memory:candle:{record['id']}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="memory:back"))
    builder.adjust(1)
    
    keyboard = builder.as_markup()
    
    await callback.message.edit_text(record_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("memory:nav:"))
async def navigate_memory_records(callback: CallbackQuery, db: Database):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–ø–∏—Å—è–º –ø–∞–º—è—Ç–∏"""
    index = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    records = await db.get_memory_records()
    
    if not records:
        await callback.answer("‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    await show_memory_record(callback, records, index)

@router.callback_query(F.data == "memory:info")
async def memory_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –ø–∞–º—è—Ç–∏"""
    await callback.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø–∏—Å—è–º", show_alert=True) 