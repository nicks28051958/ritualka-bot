from typing import Dict, List, Optional

class FuneralService:
    def __init__(self):
        self.packages = self._init_packages()
    
    def _init_packages(self) -> Dict[str, Dict]:
        """ะะฝะธัะธะฐะปะธะทะฐัะธั ะฟะฐะบะตัะพะฒ ััะปัะณ"""
        return {
            "basic_traditional": {
                "name": "ะะฐะทะพะฒัะน ะฟะฐะบะตั (ะขัะฐะดะธัะธะพะฝะฝัะต ะฟะพัะพัะพะฝั)",
                "description": "ะะบะปััะฐะตั: ััะฐะฝัะฟะพััะธัะพะฒะบั, ะพัะพัะผะปะตะฝะธะต ะดะพะบัะผะตะฝัะพะฒ, ะณัะพะฑ ััะฐะฝะดะฐััะฝัะน, ะฒะตะฝะพะบ, ะทะฐะป ะฟัะพัะฐะฝะธั",
                "price": 25000,
                "services": ["transport", "documents", "coffin", "wreaths", "hall"],
                "funeral_type": "traditional",
                "budget": "less_30k"
            },
            "premium_traditional": {
                "name": "ะัะตะผะธัะผ ะฟะฐะบะตั (ะขัะฐะดะธัะธะพะฝะฝัะต ะฟะพัะพัะพะฝั)",
                "description": "ะะบะปััะฐะตั: ััะฐะฝัะฟะพััะธัะพะฒะบั, ะพัะพัะผะปะตะฝะธะต ะดะพะบัะผะตะฝัะพะฒ, ะณัะพะฑ ะฟัะตะผะธัะผ, ะฒะตะฝะบะธ, ะทะฐะป ะฟัะพัะฐะฝะธั, ะพัะฟะตะฒะฐะฝะธะต, ะผัะทัะบะฐ",
                "price": 45000,
                "services": ["transport", "documents", "coffin", "wreaths", "hall", "service", "music"],
                "funeral_type": "traditional",
                "budget": "30k_60k"
            },
            "luxury_traditional": {
                "name": "ะัะบั ะฟะฐะบะตั (ะขัะฐะดะธัะธะพะฝะฝัะต ะฟะพัะพัะพะฝั)",
                "description": "ะะบะปััะฐะตั: ะฒัะต ััะปัะณะธ + ะฟัะตะผะธัะผ ะณัะพะฑ, ัะฒะตัั, ัะฐััะธัะตะฝะฝะพะต ะพัะฟะตะฒะฐะฝะธะต",
                "price": 75000,
                "services": ["transport", "documents", "coffin", "wreaths", "hall", "service", "music", "flowers"],
                "funeral_type": "traditional",
                "budget": "more_60k"
            },
            "basic_cremation": {
                "name": "ะะฐะทะพะฒัะน ะฟะฐะบะตั (ะัะตะผะฐัะธั)",
                "description": "ะะบะปััะฐะตั: ััะฐะฝัะฟะพััะธัะพะฒะบั, ะพัะพัะผะปะตะฝะธะต ะดะพะบัะผะตะฝัะพะฒ, ััะฝั ััะฐะฝะดะฐััะฝัั",
                "price": 20000,
                "services": ["transport", "documents"],
                "funeral_type": "cremation",
                "budget": "less_30k"
            },
            "premium_cremation": {
                "name": "ะัะตะผะธัะผ ะฟะฐะบะตั (ะัะตะผะฐัะธั)",
                "description": "ะะบะปััะฐะตั: ััะฐะฝัะฟะพััะธัะพะฒะบั, ะพัะพัะผะปะตะฝะธะต ะดะพะบัะผะตะฝัะพะฒ, ััะฝั ะฟัะตะผะธัะผ, ะทะฐะป ะฟัะพัะฐะฝะธั",
                "price": 35000,
                "services": ["transport", "documents", "hall"],
                "funeral_type": "cremation",
                "budget": "30k_60k"
            },
            "luxury_cremation": {
                "name": "ะัะบั ะฟะฐะบะตั (ะัะตะผะฐัะธั)",
                "description": "ะะบะปััะฐะตั: ะฒัะต ััะปัะณะธ + ะฟัะตะผะธัะผ ััะฝะฐ, ะพัะฟะตะฒะฐะฝะธะต, ะผัะทัะบะฐ",
                "price": 55000,
                "services": ["transport", "documents", "hall", "service", "music"],
                "funeral_type": "cremation",
                "budget": "more_60k"
            }
        }
    
    def select_package(self, funeral_type: str, services: List[str], budget: str) -> Optional[Dict]:
        """ะะพะดะฑะพั ะฟะฐะบะตัะฐ ััะปัะณ ะฝะฐ ะพัะฝะพะฒะต ะฐะฝะบะตัั"""
        
        # ะคะธะปััััะตะผ ะฟะฐะบะตัั ะฟะพ ัะธะฟั ะฟะพัะพัะพะฝ
        suitable_packages = [
            pkg for pkg_id, pkg in self.packages.items()
            if pkg["funeral_type"] == funeral_type
        ]
        
        if not suitable_packages:
            return None
        
        # ะัะตะฝะธะฒะฐะตะผ ัะพะพัะฒะตัััะฒะธะต ััะปัะณ
        best_package = None
        best_score = 0
        
        for package in suitable_packages:
            score = 0
            
            # ะัะพะฒะตััะตะผ ัะพะพัะฒะตัััะฒะธะต ะฑัะดะถะตัะฐ
            if package["budget"] == budget:
                score += 3
            elif (budget == "less_30k" and package["budget"] == "30k_60k") or \
                 (budget == "more_60k" and package["budget"] == "30k_60k"):
                score += 1
            
            # ะัะพะฒะตััะตะผ ัะพะพัะฒะตัััะฒะธะต ััะปัะณ
            package_services = set(package["services"])
            user_services = set(services)
            
            # ะะฐ ะบะฐะถะดัั ัะพะฒะฟะฐะดะฐัััั ััะปัะณั +1 ะฑะฐะปะป
            score += len(package_services.intersection(user_services))
            
            # ะะฐ ะบะฐะถะดัั ะปะธัะฝัั ััะปัะณั ะฒ ะฟะฐะบะตัะต +0.5 ะฑะฐะปะปะฐ
            score += len(package_services - user_services) * 0.5
            
            if score > best_score:
                best_score = score
                best_package = package
        
        return best_package
    
    def get_package_details(self, package_id: str) -> Optional[Dict]:
        """ะะพะปััะตะฝะธะต ะดะตัะฐะปะตะน ะฟะฐะบะตัะฐ ะฟะพ ID"""
        return self.packages.get(package_id)
    
    def get_all_packages(self) -> Dict[str, Dict]:
        """ะะพะปััะตะฝะธะต ะฒัะตั ะฟะฐะบะตัะพะฒ"""
        return self.packages
    
    def format_package_message(self, package: Dict) -> str:
        """ะคะพัะผะฐัะธัะพะฒะฐะฝะธะต ัะพะพะฑัะตะฝะธั ั ะฟะฐะบะตัะพะผ"""
        services_map = {
            "transport": "๐ ะขัะฐะฝัะฟะพััะธัะพะฒะบะฐ",
            "documents": "๐ ะัะพัะผะปะตะฝะธะต ะดะพะบัะผะตะฝัะพะฒ",
            "service": "โช ะัะฟะตะฒะฐะฝะธะต",
            "coffin": "โฐ๏ธ ะัะพะฑ",
            "wreaths": "๐ ะะตะฝะบะธ",
            "music": "๐ต ะัะทัะบะฐ",
            "hall": "๐๏ธ ะะฐะป ะฟัะพัะฐะฝะธั",
            "flowers": "๐น ะฆะฒะตัั"
        }
        
        services_text = "\n".join([f"โข {services_map.get(service, service)}" for service in package["services"]])
        
        return f"""
๐ฆ **{package['name']}**

{package['description']}

๐ฐ **ะกัะพะธะผะพััั:** {package['price']:,} โฝ

๐ **ะะบะปััะตะฝะฝัะต ััะปัะณะธ:**
{services_text}

ะะปั ะพัะพัะผะปะตะฝะธั ะทะฐะบะฐะทะฐ ะฝะฐะถะผะธัะต ะบะฝะพะฟะบั ะฝะธะถะต.
        """.strip() 